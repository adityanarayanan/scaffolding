<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- Scan the given package recursively for user defined Spring beans and add to container -->
	<!-- Note that although Controller singletons are initialized in the Spring container,
			the tag mvc:annotation-driven needs to be explicitly added in order to bind the annotated 
			controllers to individual HTTP requests -->
	<context:component-scan base-package="com.springboard" />
	
	<!-- Enables us to use ${} notation to access properties loaded for the specified properties file
			within this XML -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	
	<!-- Configure annotations for Spring MVC: DO NOT FORGET THIS OR SPRING FORGETS TO BIND THE CONTROLLERS TO WEB REQUESTS -->
	<mvc:annotation-driven />
	
	<!-- Serve static resources such as CSS and JS directly -->
	<mvc:resources location="/resources/" mapping="/resources/**"/>
	
	<!-- Initialize the Hibernate Session Factory according to the given parameters -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- Data source refers to the source of database connections, in this case a connection pool -->
		<property name="dataSource" ref="dataSource" />
		<!-- Location of JPA Entities configured to map to tables in the database -->
		<property name="packagesToScan" value="com.springboard.entities" />
		<!-- Additional Hibernate properties -->
		<property name="hibernateProperties">
			<props>
				<!-- Commented for production... <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
			</props>
		</property>
	</bean>
	
	<!-- Data Source used by Hibernate, consists of a pool of connections in this case,
			and authentication credentials for database -->
	<bean id="dataSource" class="org.apache.tomcat.dbcp.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.pass}" />
	</bean>
	
	<!-- Initializes the Transaction Manager for ensuring transactional integrity in database operations -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- View resolver for JSP files: Retrieves the requested view and sends to controller -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
</beans>
