
Spring Boilerplate

* Architecture
** HTML5/JavaScript Front end communicating with backend using REST
** Spring MVC/Servlet based backend hosted on Tomcat 7
** MySQL database server
* Design Tasks
** TODO Define primary database entities and relationships
** TODO Define corresponding entities in Java along with the necessary relationships
** TODO Define DAOs and service objects for primary entities (consider basic functionality)
** TODO Define basic utility functions needed
** TODO Define authentication mechanism (if any)
** TODO Define main controller flows (assuming MVC pattern for backend)
** TODO Define front end user interaction flows
* Infrastructure Tasks
** TODO Set up a dynamic web project in an IDE (preferably Eclipse)
1) Split source folders into three parts
   1) src/java for Java code
   2) src/resources for XMLs (such as applicationContext.xml) and PROPERTIES files needed on the classpath
   3) src/databaseScripts for DDL scripts to quickly set up the database in a new instance
2) Set up basic packages, such as:
   1) com.<project_name>.entities (for POJOs that map to database entities)
   2) com.<project_name>.models (for POJOs that don't map to database entities, but are used to display data in presentation layer)
   3) com.<project_name>.dao (for data access object interfaces; preferably have a generic interface ready)
   4) com.<project_name>.dao.impl (for data access object implementations; prefereably have a generic implementation ready)
   5) com.<project_name>.managers (for manager object* interface, provides abstraction between DAOs and business logic)
   6) com.<project_name>.managers.impl (for manager object implementations)
   7) com.<project_name>.utils (for common utility functions and, if applicable, global constant definition/initialization)
   8) com.<project_name>.controllers (for MVC controllers, handling HTTP requests from front end)
   9) com.<project_name>.services (for core business logic; services invoked from controller to perform business specific actions)

-* What is a manager object?
   It is an object that offers a higher level of abstraction between the calling service and the entity than the DAO. We will use manager objects to call the corresponding DAOs
   for a given entity (e.g. User or Customer), and use Spring's @Transaction annotations on the called methods to enable transaction management for database operation methods.

3) Set up folder structure for views (JSPs) and add web resources, namely, CSS and JS libraries:
   1) Replicate the following folder structure within the project-
      WebContent/WEB-INF/views/ (for application views, such as homepage etc)
      WebContent/resources/js/ (for JS libraries and app specific JS)
      WebContent/resources/css/ (for CSS libraries and app specific CSS)
      Take care *not* to put the /resources/ folder within WEB-INF as it cannot be accessed through the URL bar directly,
      which we need for loading of static resources.


** TODO Set up Tomcat 7 server and corresponding Eclipse settings
We will be using two instances of Tomcat, a development instance that we'll use with Eclipse for development, and a production instance where we will deploy the resulting WAR
file built by our Ant build script. We are assuming here that Windows is the development environment.

Development instance:
1) Download the 32/64 bit Windows zip from http://tomcat.apache.org/download-70.cgi and unzip in a preferred location e.g. C:/Tomcat7dev
2) Add Tomcat 7 as a deployment server in Eclipse:
   1) Add new Server by going to File -> New -> Other -> Server
   2) Go to Apache and select Tomcat v7.0 server and click on Next
   3) Select the Tomcat installation directory as your download location, with the root directory being the directory *one* level over bin/, and click Next
   4) Add the current project to configure it on the server and click Finish
   5) Right click on the project, go to Properties, select Targeted Runtimes
   6) If Apache Tomcat 7.0 is not checked, then check it, apply and save

Production instance:
1) Download the 32/64 bit Windows Service installer from http://tomcat.apache.org/download-70.cgi and run an installation
2) Once installed, run the "Monitor Tomcat" application and use it to Start/Stop the server instance
3) Do not add this as a Server in Eclipse, we will be using this as a production deployment server
4) If you wish to change the Default Port for Tomcat, open the file conf/server.xml within the Tomcat directory, and follow the instructions specified in
   http://www.mkyong.com/tomcat/how-to-change-tomcat-default-port/ to change the default port
5) When the WAR package is ready for a functioning web application:
   1) Ensure the server is not running
   2) Take the WAR package and copy it to the webapps/ directory within the installation directory
   3) Start the server
   4) The application should now be up and running and can be accessed using the following link http://localhost:portNumber/ProjectName/
   5) By default, the port for Tomcat is 8080, but if it is set to 80, then the *port number* can be ignored in the above hyperlink

** TODO Set up MySQL server instance with database entities as defined in Design
** TODO Write Ant script for build and packaging
** TODO Import all necessary libraries (list below)
As the application will be deployed to a server, the libraries will need to be copied into the project, into different locations based on whether they are Java libraries
or web based resources such as JS or CSS.

The following Java libraries need to be downloaded and copied into WebContent/WEB-INF/lib/:
1) Spring 3.2.7 (include aopalliance)
2) Hibernate 4.2.12
3) Apache Commons (for file and other utility functions) and DBCP (for connection pooling)
4) MySQL JDBC connector
5) JSTL and Standard JARs for JSP templating and tag libraries

The following JS and CSS libraries need to be downloaded and copied into WebContent/WEB-INF/resources/js/ and WebContent/WEB-INF/resources/css/ respectively:
1) JQuery 1.11.1 (for JavaScript common functions)
   Copy the following file(s):
   1) jquery-1.11.1.min.js to the js/ folder
2) Bootstrap 3.2 (for CSS)
   Copy the following file(s):
   1) bootstrap.min.js to the js/ folder
   2) bootstrap.min.css to the css/ folder

** 
* Dev Tasks
* Testing Tasks
